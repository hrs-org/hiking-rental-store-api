name: CI Pipeline

on:
    pull_request:
        branches: [main, develop]
    push:
        branches: [main]

permissions:
    contents: read
    actions: read
    security-events: write
    pull-requests: write
    checks: write

env:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_NOLOGO: true

jobs:
    build:
        name: Build
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  global-json-file: global.json

            - name: Cache NuGet packages
              uses: actions/cache@v4
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget-

            - name: Restore dependencies
              run: dotnet restore HikingRentalStore.sln

            - name: Build solution
              run: dotnet build HikingRentalStore.sln --configuration Release --no-restore

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: build-artifacts
                  path: |
                      **/bin/Release/**
                      **/obj/Release/**
                  retention-days: 1

    test:
        name: Run Tests
        runs-on: ubuntu-latest
        needs: build

        steps:
            - name: DEBUG - Test job started
              run: |
                  echo "üî• TEST JOB IS RUNNING! üî•"
                  echo "Current time: $(date)"
                  echo "Working directory: $(pwd)"
                  echo "User: $(whoami)"

            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  global-json-file: global.json

            - name: Cache NuGet packages
              uses: actions/cache@v4
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget-

            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build-artifacts

            - name: Create coverage directory
              run: mkdir -p ./coverage

            - name: DEBUG - Before running tests
              run: |
                  echo "üß™ ABOUT TO RUN TESTS! üß™"
                  echo "Current directory contents:"
                  ls -la
                  echo ""
                  echo "Looking for test projects:"
                  find . -name "*Test*.csproj" -type f
                  echo ""
                  echo "Checking solution file:"
                  ls -la *.sln

            - name: Install dotnet-coverage tool
              run: |
                  echo "=== Installing dotnet-coverage tool ==="
                  dotnet tool install --global dotnet-coverage

            - name: Run tests with coverage
              run: |
                  echo "=== Running tests with dotnet-coverage ==="
                  # Use dotnet-coverage (modern Microsoft tool)
                  dotnet-coverage collect "dotnet test HikingRentalStore.sln --configuration Release --no-build" \
                    -f xml -o "./coverage/coverage.xml"
                    
                  # Also generate test results for SonarCloud
                  dotnet test HikingRentalStore.sln --configuration Release --no-build \
                    --logger "trx;LogFileName=TestResults.trx" \
                    --results-directory ./coverage

            - name: COMPREHENSIVE COVERAGE DEBUG
              run: |
                  echo "=========================================="
                  echo "COVERAGE DEBUG - CURRENT DIRECTORY"
                  echo "=========================================="
                  pwd
                  ls -la

                  echo "=========================================="
                  echo "COVERAGE DEBUG - COVERAGE DIRECTORY"
                  echo "=========================================="
                  if [ -d "./coverage" ]; then
                    echo "‚úÖ Coverage directory exists"
                    echo "Contents:"
                    find ./coverage -type f -exec ls -la {} \;
                  else
                    echo "‚ùå Coverage directory missing!"
                  fi

                  echo "=========================================="
                  echo "COVERAGE DEBUG - TEST PROJECTS CHECK"
                  echo "=========================================="
                  echo "Test projects with Microsoft.NET.Test.Sdk:"
                  find . -name "*.csproj" -exec grep -l "Microsoft.NET.Test" {} \; 2>/dev/null | head -5
                  echo ""
                  echo "Test projects with test frameworks:"
                  find . -name "*.csproj" -exec grep -l "xunit\|nunit\|mstest" {} \; 2>/dev/null | head -5

                  echo "=========================================="
                  echo "COVERAGE DEBUG - XML FILES SEARCH"
                  echo "=========================================="
                  echo "Looking for coverage XML files:"
                  find . -name "*coverage*.xml" -type f 2>/dev/null | head -10
                  echo ""
                  echo "Looking for cobertura XML files:"
                  find . -name "*cobertura*.xml" -type f 2>/dev/null | head -10

            - name: Upload test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: test-results
                  path: ./coverage/
                  retention-days: 1

    code-quality:
        name: Code Quality Analysis
        runs-on: ubuntu-latest
        needs: [build, test]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  global-json-file: global.json

            - name: Cache SonarCloud packages
              uses: actions/cache@v4
              with:
                  path: ~/.sonar/cache
                  key: ${{ runner.os }}-sonar
                  restore-keys: ${{ runner.os }}-sonar

            - name: Install SonarCloud scanner
              run: |
                  dotnet tool install --global dotnet-sonarscanner

            - name: Cache NuGet packages
              uses: actions/cache@v4
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget-

            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build-artifacts

            - name: Download test results
              uses: actions/download-artifact@v4
              with:
                  name: test-results
                  path: ./coverage

            - name: SONAR DEBUG - Check downloaded artifacts
              run: |
                  echo "=========================================="
                  echo "SONAR DEBUG - ARTIFACTS CHECK"
                  echo "=========================================="
                  pwd

                  echo "Coverage directory contents:"
                  if [ -d "./coverage" ]; then
                    ls -la ./coverage/
                    echo ""
                    if [ -f "./coverage/coverage.xml" ]; then
                      echo "‚úÖ Coverage file found: coverage.xml"
                      echo "File size: $(stat -c%s ./coverage/coverage.xml 2>/dev/null || stat -f%z ./coverage/coverage.xml) bytes"
                      echo "First 10 lines:"
                      head -10 ./coverage/coverage.xml
                    else
                      echo "‚ùå coverage.xml not found!"
                    fi
                  else
                    echo "‚ùå No coverage directory found!"
                    ls -la .
                  fi

            - name: Begin SonarCloud analysis
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
              run: |
                  # Configure SonarCloud with Visual Studio Code Coverage format (dotnet-coverage output)
                  dotnet-sonarscanner begin \
                    /k:"hrs-org_hiking-rental-store-api" \
                    /o:"hrs-org" \
                    /d:sonar.token="$SONAR_TOKEN" \
                    /d:sonar.host.url="https://sonarcloud.io" \
                    /d:sonar.cs.vstest.reportsPaths="coverage/TestResults.trx" \
                    /d:sonar.cs.vscoveragexml.reportsPaths="coverage/coverage.xml" \
                    /d:sonar.coverage.exclusions="**/*.Tests/**,**/Tests/**,**/*Test*/**" \
                    /d:sonar.verbose=true

            - name: Restore dependencies (for SonarQube analysis)
              run: dotnet restore HikingRentalStore.sln

            - name: Build for SonarQube analysis
              run: dotnet build HikingRentalStore.sln --configuration Release --no-restore

            - name: End SonarCloud analysis
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
              run: dotnet-sonarscanner end /d:sonar.token="$SONAR_TOKEN"

    security-scan:
        name: Security Scan
        runs-on: ubuntu-latest
        needs: build

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  global-json-file: global.json

            - name: Cache NuGet packages
              uses: actions/cache@v4
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget-

            - name: Restore dependencies
              run: dotnet restore HikingRentalStore.sln

            - name: Run security audit
              run: dotnet list package --vulnerable --include-transitive

    lint:
        name: Code Formatting & Style
        runs-on: ubuntu-latest
        needs: build

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  global-json-file: global.json

            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build-artifacts

            - name: Verify code formatting
              run: dotnet format HikingRentalStore.sln --verify-no-changes --verbosity diagnostic
