name: CI Pipeline

on:
    pull_request:
        branches: [main, develop]
    push:
        branches: [main]

permissions:
    contents: read
    actions: read
    security-events: write
    pull-requests: write
    checks: write

env:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_NOLOGO: true

jobs:
    build:
        name: Build
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  global-json-file: global.json

            - name: Cache NuGet packages
              uses: actions/cache@v4
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget-

            - name: Restore dependencies
              run: dotnet restore HikingRentalStore.sln

            - name: Build solution
              run: dotnet build HikingRentalStore.sln --configuration Release --no-restore

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: build-artifacts
                  path: |
                      **/bin/Release/**
                      **/obj/Release/**
                  retention-days: 1

    test:
        name: Run Tests
        runs-on: ubuntu-latest
        needs: build

        steps:
            - name: DEBUG - Test job started
              run: |
                  echo "🔥 TEST JOB IS RUNNING! 🔥"
                  echo "Current time: $(date)"
                  echo "Working directory: $(pwd)"
                  echo "User: $(whoami)"

            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  global-json-file: global.json

            - name: Cache NuGet packages
              uses: actions/cache@v4
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget-

            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build-artifacts

            - name: Create coverage directory
              run: mkdir -p ./coverage

            - name: Create coverage settings
              run: |
                  cat > coverage.runsettings << 'EOF'
                  <?xml version="1.0" encoding="utf-8"?>
                  <RunSettings>
                    <DataCollectionRunSettings>
                      <DataCollectors>
                        <DataCollector friendlyName="XPlat code coverage">
                          <Configuration>
                            <Format>cobertura</Format>
                            <Exclude>[*.Tests]*,[*]*Test*</Exclude>
                            <ExcludeByAttribute>Obsolete,GeneratedCodeAttribute,CompilerGeneratedAttribute</ExcludeByAttribute>
                          </Configuration>
                        </DataCollector>
                      </DataCollectors>
                    </DataCollectionRunSettings>
                  </RunSettings>
                  EOF
                  echo "Created coverage.runsettings:"
                  cat coverage.runsettings

            - name: DEBUG - Before running tests
              run: |
                  echo "🧪 ABOUT TO RUN TESTS! 🧪"
                  echo "Current directory contents:"
                  ls -la
                  echo ""
                  echo "Looking for test projects:"
                  find . -name "*Test*.csproj" -type f
                  echo ""
                  echo "Checking solution file:"
                  ls -la *.sln

            - name: Run tests with coverage
              run: |
                  echo "=== Running tests with coverage collection ==="

                  # First try: XPlat Code Coverage with settings file
                  dotnet test HikingRentalStore.sln --configuration Release --no-build \
                    --collect:"XPlat Code Coverage" \
                    --results-directory ./coverage \
                    --settings ./coverage.runsettings \
                    --logger "trx;LogFileName=TestResults.trx" \
                    --verbosity normal
                    
                  echo "=== Try MSBuild approach with fresh build ==="
                  # Restore packages to ensure coverlet.msbuild is available
                  dotnet restore HikingRentalStore.sln

                  # Build and run tests with MSBuild coverage properties
                  dotnet test HikingRentalStore.sln --configuration Release \
                    /p:CollectCoverage=true \
                    /p:CoverletOutputFormat=cobertura \
                    /p:CoverletOutput=./coverage/ \
                    --logger "trx;LogFileName=TestResults-alt.trx" \
                    --results-directory ./coverage || echo "MSBuild approach failed"
                    
                  echo "=== Try coverlet global tool as fallback ==="
                  # Install coverlet as global tool
                  dotnet tool install --global coverlet.console || echo "Coverlet already installed"

                  # Use coverlet global tool
                  coverlet "HRS.Test/bin/Release/net8.0/HRS.Test.dll" \
                    --target "dotnet" \
                    --targetargs "test HRS.Test/HRS.Test.csproj --configuration Release --no-build" \
                    --format cobertura \
                    --output "./coverage/coverage-global.xml" || echo "Global tool approach failed"

            - name: COMPREHENSIVE COVERAGE DEBUG
              run: |
                  echo "=========================================="
                  echo "COVERAGE DEBUG - CURRENT DIRECTORY"
                  echo "=========================================="
                  pwd
                  ls -la

                  echo "=========================================="
                  echo "COVERAGE DEBUG - COVERAGE DIRECTORY"
                  echo "=========================================="
                  if [ -d "./coverage" ]; then
                    echo "✅ Coverage directory exists"
                    echo "Contents:"
                    find ./coverage -type f -exec ls -la {} \;
                  else
                    echo "❌ Coverage directory missing!"
                  fi

                  echo "=========================================="
                  echo "COVERAGE DEBUG - TEST PROJECTS CHECK"
                  echo "=========================================="
                  echo "Test projects with Microsoft.NET.Test.Sdk:"
                  find . -name "*.csproj" -exec grep -l "Microsoft.NET.Test" {} \; 2>/dev/null | head -5
                  echo ""
                  echo "Test projects with test frameworks:"
                  find . -name "*.csproj" -exec grep -l "xunit\|nunit\|mstest" {} \; 2>/dev/null | head -5

                  echo "=========================================="
                  echo "COVERAGE DEBUG - XML FILES SEARCH"
                  echo "=========================================="
                  echo "Looking for coverage XML files:"
                  find . -name "*coverage*.xml" -type f 2>/dev/null | head -10
                  echo ""
                  echo "Looking for cobertura XML files:"
                  find . -name "*cobertura*.xml" -type f 2>/dev/null | head -10

            - name: Upload test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: test-results
                  path: ./coverage/
                  retention-days: 1

    code-quality:
        name: Code Quality Analysis
        runs-on: ubuntu-latest
        needs: [build, test]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  global-json-file: global.json

            - name: Cache SonarCloud packages
              uses: actions/cache@v4
              with:
                  path: ~/.sonar/cache
                  key: ${{ runner.os }}-sonar
                  restore-keys: ${{ runner.os }}-sonar

            - name: Install SonarCloud scanner
              run: |
                  dotnet tool install --global dotnet-sonarscanner

            - name: Cache NuGet packages
              uses: actions/cache@v4
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget-

            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build-artifacts

            - name: Download test results
              uses: actions/download-artifact@v4
              with:
                  name: test-results
                  path: ./coverage

            - name: SONAR DEBUG - Check downloaded artifacts
              run: |
                  echo "=========================================="
                  echo "SONAR DEBUG - ARTIFACTS CHECK"
                  echo "=========================================="
                  pwd

                  echo "Coverage directory contents:"
                  if [ -d "./coverage" ]; then
                    ls -la ./coverage/
                    echo ""
                    echo "File details:"
                    find ./coverage -type f -exec ls -la {} \;
                    echo ""
                    echo "Show first few lines of coverage files:"
                    find ./coverage -name "*.xml" -exec head -10 {} \; 2>/dev/null || echo "No XML files to preview"
                  else
                    echo "❌ No coverage directory found!"
                    ls -la .
                  fi

                  echo "=========================================="
                  echo "SONAR DEBUG - SPECIFIC FILE CHECK"
                  echo "=========================================="
                  echo "Looking for TestResults.trx:"
                  find ./coverage -name "TestResults.trx" 2>/dev/null || echo "❌ No TestResults.trx found"

                  echo "Looking for coverage files:"
                  find ./coverage -name "*.xml" -path "*coverage*" 2>/dev/null || echo "❌ No coverage XML files found"

                  echo "Looking for cobertura files:"
                  find ./coverage -name "*cobertura*" 2>/dev/null || echo "❌ No cobertura files found"

            - name: Prepare coverage for SonarCloud
              run: |
                  echo "=== Preparing coverage files for SonarCloud ==="

                  # Find and copy coverage files to expected locations
                  COVERAGE_FILE=$(find ./coverage -name "*coverage*.xml" | head -1)
                  if [ -n "$COVERAGE_FILE" ]; then
                    echo "Found coverage file: $COVERAGE_FILE"
                    cp "$COVERAGE_FILE" ./coverage/coverage.xml
                    echo "Copied to coverage.xml"
                  fi

                  # Also look for cobertura files from the MSBuild approach
                  COBERTURA_FILE=$(find ./coverage -name "*cobertura*.xml" | head -1)
                  if [ -n "$COBERTURA_FILE" ]; then
                    echo "Found cobertura file: $COBERTURA_FILE"
                    cp "$COBERTURA_FILE" ./coverage/cobertura.xml
                    echo "Copied to cobertura.xml"
                  fi

                  echo "Final coverage directory:"
                  ls -la ./coverage/

            - name: Verify coverage for SonarCloud
              run: |
                  echo "=== Verifying coverage file for SonarCloud ==="

                  if [ -f "./coverage/coverage-global.xml" ]; then
                    echo "✅ Coverage file exists: coverage-global.xml"
                    echo "File size: $(stat -c%s ./coverage/coverage-global.xml) bytes"
                    echo "First 20 lines of coverage file:"
                    head -20 ./coverage/coverage-global.xml
                    echo ""
                    echo "Coverage summary from file:"
                    grep -E "line-rate|branch-rate" ./coverage/coverage-global.xml | head -1
                  else
                    echo "❌ Coverage file missing!"
                    exit 1
                  fi

            - name: Begin SonarCloud analysis
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
              run: |
                  # Enable coverage with the generated coverage file
                  dotnet-sonarscanner begin \
                    /k:"hrs-org_hiking-rental-store-api" \
                    /o:"hrs-org" \
                    /d:sonar.token="$SONAR_TOKEN" \
                    /d:sonar.host.url="https://sonarcloud.io" \
                    /d:sonar.cs.vstest.reportsPaths="coverage/TestResults.trx,coverage/TestResults-alt.trx" \
                    /d:sonar.cs.cobertura.reportsPaths="coverage/coverage-global.xml" \
                    /d:sonar.coverage.exclusions="**/*.Tests/**,**/Tests/**,**/*Test*/**" \
                    /d:sonar.verbose=true

            - name: Restore dependencies (for SonarQube analysis)
              run: dotnet restore HikingRentalStore.sln

            - name: Build for SonarQube analysis
              run: dotnet build HikingRentalStore.sln --configuration Release --no-restore

            - name: End SonarCloud analysis
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
              run: dotnet-sonarscanner end /d:sonar.token="$SONAR_TOKEN"

    security-scan:
        name: Security Scan
        runs-on: ubuntu-latest
        needs: build

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  global-json-file: global.json

            - name: Cache NuGet packages
              uses: actions/cache@v4
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget-

            - name: Restore dependencies
              run: dotnet restore HikingRentalStore.sln

            - name: Run security audit
              run: dotnet list package --vulnerable --include-transitive

    lint:
        name: Code Formatting & Style
        runs-on: ubuntu-latest
        needs: build

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  global-json-file: global.json

            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build-artifacts

            - name: Verify code formatting
              run: dotnet format HikingRentalStore.sln --verify-no-changes --verbosity diagnostic
