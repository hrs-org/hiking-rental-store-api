name: CI Pipeline

on:
    pull_request:
        branches: [develop]
    push:
        branches: [develop]
    release:
        types: [published]

permissions:
    contents: read
    actions: read
    security-events: write
    pull-requests: write
    checks: write

env:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_NOLOGO: true

jobs:
    build:
        name: Build
        runs-on: ubuntu-latest
        if: github.event_name != 'release'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  global-json-file: global.json

            - name: Cache NuGet packages
              uses: actions/cache@v4
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget-

            - name: Restore dependencies
              run: dotnet restore HikingRentalStore.sln

            - name: Build solution
              run: dotnet build HikingRentalStore.sln --configuration Release --no-restore

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: build-artifacts
                  path: |
                      **/bin/Release/**
                      **/obj/Release/**
                  retention-days: 1

    test:
        name: Run Tests
        runs-on: ubuntu-latest
        needs: build
        if: github.event_name != 'release'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build-artifacts

            - name: Create coverage directory
              run: mkdir -p ./coverage

            - name: Install dotnet-coverage tool
              run: dotnet tool install --global dotnet-coverage

            - name: Run tests with coverage
              run: |
                  # Generate code coverage using dotnet-coverage
                  dotnet-coverage collect "dotnet test HikingRentalStore.sln --configuration Release --no-build" \
                    -f xml -o "./coverage/coverage.xml"
                    
                  # Generate test results for SonarCloud
                  dotnet test HikingRentalStore.sln --configuration Release --no-build \
                    --logger "trx;LogFileName=TestResults.trx" \
                    --results-directory ./coverage

            - name: Upload test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: test-results
                  path: ./coverage/
                  retention-days: 1

    code-quality:
        name: Code Quality Analysis
        runs-on: ubuntu-latest
        needs: [build, test]
        if: github.event_name != 'release'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  global-json-file: global.json

            - name: Install SonarCloud scanner
              run: dotnet tool install --global dotnet-sonarscanner

            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build-artifacts

            - name: Download test results
              uses: actions/download-artifact@v4
              with:
                  name: test-results
                  path: ./coverage

            - name: Begin SonarCloud analysis
              env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              run: |
                  dotnet-sonarscanner begin \
                    /k:"hrs-org_hiking-rental-store-api" \
                    /o:"hrs-org" \
                    /d:sonar.token="$SONAR_TOKEN" \
                    /d:sonar.host.url="https://sonarcloud.io" \
                    /d:sonar.scanner.scanAll=false \
                    /d:sonar.cs.vstest.reportsPaths="coverage/TestResults.trx" \
                    /d:sonar.cs.vscoveragexml.reportsPaths="coverage/coverage.xml" \
                    /d:sonar.coverage.exclusions="**/*.Tests/**,**/Tests/**,**/*Test*/**"

            - name: Restore dependencies (for SonarQube analysis)
              run: dotnet restore HikingRentalStore.sln

            - name: Build for SonarQube analysis
              run: dotnet build HikingRentalStore.sln --configuration Release --no-restore

            - name: End SonarCloud analysis
              env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              run: dotnet-sonarscanner end /d:sonar.token="$SONAR_TOKEN"

    security-scan:
        name: Security Scan
        runs-on: ubuntu-latest
        needs: build
        if: github.event_name != 'release'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build-artifacts

            - name: Run security audit
              run: dotnet list package --vulnerable --include-transitive

    lint:
        name: Code Formatting & Style
        runs-on: ubuntu-latest
        needs: build
        if: github.event_name != 'release'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build-artifacts

            - name: Verify code formatting
              run: dotnet format HikingRentalStore.sln --verify-no-changes --verbosity diagnostic

    docker-build:
        name: Build & Push Docker Image
        runs-on: ubuntu-latest
        needs: [build, test, code-quality, security-scan, lint]
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        environment: staging

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build-artifacts

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: true
                  tags: |
                      ${{ secrets.DOCKER_USERNAME }}/hrs-api:develop
                      ${{ secrets.DOCKER_USERNAME }}/hrs-api:${{ github.sha }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    dast:
        name: DAST Security Scan
        runs-on: ubuntu-latest
        needs: docker-build
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        environment: staging

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Pull and run Docker image
              run: |
                  docker pull ${{ secrets.DOCKER_USERNAME }}/hrs-api:${{ github.sha }}
                  docker run -d -p 5000:8080 --name hrs-api \
                    -e ASPNETCORE_ENVIRONMENT=Staging \
                    -e ConnectionStrings__DefaultConnection="${{ secrets.CONNECTION_STRING }}" \
                    -e Jwt__Key="${{ secrets.JWT_KEY }}" \
                    -e Jwt__Issuer="${{ secrets.JWT_ISSUER }}" \
                    -e Jwt__Audience="${{ secrets.JWT_AUDIENCE }}" \
                    ${{ secrets.DOCKER_USERNAME }}/hrs-api:${{ github.sha }}
                  sleep 30

            - name: OWASP ZAP Baseline Scan
              uses: zaproxy/action-baseline@v0.10.0
              with:
                  target: "http://localhost:5000"

            - name: Stop application
              if: always()
              run: docker stop hrs-api

    production-build:
        name: Production Docker Release
        runs-on: ubuntu-latest
        if: github.event_name == 'release'
        environment: production

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Extract version from tag
              id: version
              run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

            - name: Get commit SHA for release
              id: commit
              run: echo "SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

            - name: Re-tag existing image for production
              run: |
                  # Pull the exact image that was built from this commit SHA
                  docker pull ${{ secrets.DOCKER_USERNAME }}/hrs-api:${{ steps.commit.outputs.SHA }}

                  # Re-tag it for production
                  docker tag ${{ secrets.DOCKER_USERNAME }}/hrs-api:${{ steps.commit.outputs.SHA }} ${{ secrets.DOCKER_USERNAME }}/hrs-api:latest
                  docker tag ${{ secrets.DOCKER_USERNAME }}/hrs-api:${{ steps.commit.outputs.SHA }} ${{ secrets.DOCKER_USERNAME }}/hrs-api:${{ steps.version.outputs.VERSION }}

                  # Push the new tags
                  docker push ${{ secrets.DOCKER_USERNAME }}/hrs-api:latest
                  docker push ${{ secrets.DOCKER_USERNAME }}/hrs-api:${{ steps.version.outputs.VERSION }}

            - name: Production release summary
              run: |
                  echo "🚀 Production release completed!"
                  echo "📦 Source image: hrs-api:${{ steps.commit.outputs.SHA }}"
                  echo "🏷️ New tags created:"
                  echo "   - hrs-api:latest"
                  echo "   - hrs-api:${{ steps.version.outputs.VERSION }}"
                  echo "🔧 Environment: production"
                  echo "🗄️ Uses production environment secrets for runtime configuration"
