name: CI Pipeline

on:
    pull_request:
        branches: [main, develop]
    push:
        branches: [main]

permissions:
    contents: read
    actions: read
    security-events: write
    pull-requests: write
    checks: write

env:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_NOLOGO: true

jobs:
    build:
        name: Build
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  global-json-file: global.json

            - name: Cache NuGet packages
              uses: actions/cache@v4
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget-

            - name: Restore dependencies
              run: dotnet restore HikingRentalStore.sln

            - name: Build solution
              run: dotnet build HikingRentalStore.sln --configuration Release --no-restore

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: build-artifacts
                  path: |
                      **/bin/Release/**
                      **/obj/Release/**
                  retention-days: 1

    test:
        name: Run Tests
        runs-on: ubuntu-latest
        needs: build

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  global-json-file: global.json

            - name: Cache NuGet packages
              uses: actions/cache@v4
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget-

            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build-artifacts

            - name: Create coverage directory
              run: mkdir -p ./coverage

            - name: Create coverage settings
              run: |
                  cat > coverage.runsettings << 'EOF'
                  <?xml version="1.0" encoding="utf-8"?>
                  <RunSettings>
                    <DataCollectionRunSettings>
                      <DataCollectors>
                        <DataCollector friendlyName="XPlat code coverage">
                          <Configuration>
                            <Format>cobertura</Format>
                            <Exclude>[*.Tests]*,[*]*Test*</Exclude>
                            <ExcludeByAttribute>Obsolete,GeneratedCodeAttribute,CompilerGeneratedAttribute</ExcludeByAttribute>
                          </Configuration>
                        </DataCollector>
                      </DataCollectors>
                    </DataCollectionRunSettings>
                  </RunSettings>
                  EOF
                  echo "Created coverage.runsettings:"
                  cat coverage.runsettings

            - name: Run tests with coverage
              run: |
                  echo "=== Running tests with coverage collection ==="
                  dotnet test HikingRentalStore.sln --configuration Release --no-build \
                    --collect:"XPlat Code Coverage" \
                    --results-directory ./coverage \
                    --logger "trx;LogFileName=TestResults.trx" \
                    --verbosity normal

                  echo "=== Alternative coverage collection attempt ==="
                  # Try with different coverage collection settings
                  dotnet test HikingRentalStore.sln --configuration Release --no-build \
                    --collect:"Code Coverage" \
                    --results-directory ./coverage-alt \
                    --verbosity normal || echo "Alternative coverage failed"

            - name: COMPREHENSIVE COVERAGE DEBUG
              run: |
                  echo "=== STEP 1: Current working directory ==="
                  pwd

                  echo "=== STEP 2: Coverage directory structure ==="
                  if [ -d "./coverage" ]; then
                    echo "Coverage directory exists"
                    find ./coverage -type f | sort
                  else
                    echo "ERROR: Coverage directory does not exist!"
                    ls -la .
                  fi

                  echo "=== STEP 3: Alternative coverage directory ==="
                  if [ -d "./coverage-alt" ]; then
                    echo "Alternative coverage directory exists"
                    find ./coverage-alt -type f | sort
                  fi

                  echo "=== STEP 4: Check if we have any test projects ==="
                  find . -name "*.csproj" -exec grep -l "Microsoft.NET.Test" {} \; 2>/dev/null || echo "No test projects found with Microsoft.NET.Test"
                  find . -name "*.csproj" -exec grep -l "xunit\|nunit\|mstest" {} \; 2>/dev/null || echo "No test frameworks found"

                  echo "=== STEP 5: Look for ANY XML files recursively ==="
                  find . -name "*.xml" -type f | grep -v obj | grep -v bin | head -20

                  echo "=== STEP 6: Try manual coverage generation ==="
                  mkdir -p ./manual-coverage
                  dotnet test HikingRentalStore.sln --configuration Release --no-build \
                    --collect:"XPlat Code Coverage" \
                    --results-directory ./manual-coverage \
                    --settings ./coverage.runsettings || echo "Manual coverage with runsettings failed"            - name: Upload test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: test-results
                  path: ./coverage/
                  retention-days: 1

    code-quality:
        name: Code Quality Analysis
        runs-on: ubuntu-latest
        needs: [build, test]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  global-json-file: global.json

            - name: Cache SonarCloud packages
              uses: actions/cache@v4
              with:
                  path: ~/.sonar/cache
                  key: ${{ runner.os }}-sonar
                  restore-keys: ${{ runner.os }}-sonar

            - name: Install SonarCloud scanner
              run: |
                  dotnet tool install --global dotnet-sonarscanner

            - name: Cache NuGet packages
              uses: actions/cache@v4
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget-

            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build-artifacts

            - name: Download test results
              uses: actions/download-artifact@v4
              with:
                  name: test-results
                  path: ./coverage

            - name: SONAR DEBUG - Check downloaded artifacts
              run: |
                  echo "=== SONAR DEBUG: Working directory ==="
                  pwd

                  echo "=== SONAR DEBUG: Coverage directory after download ==="
                  if [ -d "./coverage" ]; then
                    echo "Coverage directory exists, contents:"
                    find ./coverage -type f | sort
                    echo "Coverage directory size:"
                    du -sh ./coverage
                  else
                    echo "ERROR: Coverage directory not found!"
                    ls -la .
                  fi

                  echo "=== SONAR DEBUG: Look for specific files SonarCloud needs ==="
                  find ./coverage -name "*.cobertura.xml" 2>/dev/null || echo "No cobertura.xml files found"
                  find ./coverage -name "coverage.cobertura.xml" 2>/dev/null || echo "No coverage.cobertura.xml found"
                  find ./coverage -name "TestResults.trx" 2>/dev/null || echo "No TestResults.trx found"

                  echo "=== SONAR DEBUG: Try to create coverage file if missing ==="
                  COVERAGE_FILE=$(find ./coverage -name "*.xml" -path "*coverage*" | head -1)
                  if [ -n "$COVERAGE_FILE" ]; then
                    echo "Found coverage file: $COVERAGE_FILE"
                    cp "$COVERAGE_FILE" ./coverage/coverage.cobertura.xml
                    echo "Copied to coverage.cobertura.xml"
                  else
                    echo "No coverage XML files found at all!"
                  fi

                  echo "=== SONAR DEBUG: Final file check ==="
                  ls -la ./coverage/

            - name: Begin SonarCloud analysis
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
              run: |
                  dotnet-sonarscanner begin \
                    /k:"hrs-org_hiking-rental-store-api" \
                    /o:"hrs-org" \
                    /d:sonar.token="$SONAR_TOKEN" \
                    /d:sonar.host.url="https://sonarcloud.io" \
                    /d:sonar.coverageReportPaths="coverage/coverage.cobertura.xml" \
                    /d:sonar.cs.vstest.reportsPaths="coverage/TestResults.trx"

            - name: Restore dependencies (for SonarQube analysis)
              run: dotnet restore HikingRentalStore.sln

            - name: Build for SonarQube analysis
              run: dotnet build HikingRentalStore.sln --configuration Release --no-restore

            - name: End SonarCloud analysis
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
              run: dotnet-sonarscanner end /d:sonar.token="$SONAR_TOKEN"

    security-scan:
        name: Security Scan
        runs-on: ubuntu-latest
        needs: build

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  global-json-file: global.json

            - name: Cache NuGet packages
              uses: actions/cache@v4
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget-

            - name: Restore dependencies
              run: dotnet restore HikingRentalStore.sln

            - name: Run security audit
              run: dotnet list package --vulnerable --include-transitive

    lint:
        name: Code Formatting & Style
        runs-on: ubuntu-latest
        needs: build

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  global-json-file: global.json

            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build-artifacts

            - name: Verify code formatting
              run: dotnet format HikingRentalStore.sln --verify-no-changes --verbosity diagnostic
